#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>
#include <netdb.h>
#define MAX 1024
int sockfd;

// Function to display error
void error(const char *msg)
{
    perror(msg);
    exit(1);
}

// Function to read file
int get_file_size(int fd)
{
    struct stat stat_buf;
    fstat(fd, &stat_buf);
    return (int) stat_buf.st_size;
}

void *read_write(void *arg)
{
    int sockfd = *((int *)arg);
    int fd, n;
    int recv_fd;
    char fname[MAX];
    char file_size[MAX];
    char buf[MAX];
    char *filedata;

    // Get the file name from client
    read(sockfd, fname, MAX);

    // Open the requested file
    fd = open(fname, O_RDONLY);

    // Read file into a buffer
    filedata = (char *)malloc(sizeof(char) * get_file_size(fd));
    recv(sockfd, filedata, get_file_size(fd), 0);

    // Write the file contents back to client
    write(sockfd, filedata, get_file_size(fd));
    close(sockfd);
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        fprintf(stderr,"ERROR, no port provided\n");
        exit(1);
    }
    int sockfd, newsockfd, portno, n;
    struct sockaddr_in serv_addr;
    struct sockaddr_in cli_addr;
    socklen_t clilen;

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
        error("ERROR opening socket");
    }

    // Clear serv_addr
    bzero((char *) &serv_addr, sizeof(serv_addr));

    // Get portno from command line
    portno = atoi(argv[1]);

    // Fill serv_addr
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

    // Bind the host address
    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
    {
        error("ERROR on binding");
    }

    // Start listening for the clients
    listen(sockfd, 5);
    clilen = sizeof(cli_addr);

    // Accept actual connection from the client
    newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);

    if (newsockfd < 0)
    {
        error("ERROR on accept");
    }

    pthread_t tid;
    int err = pthread_create(&tid, NULL, &read_write, (void *)&newsockfd);
    if (err != 0)
    {
        printf("\ncan't create thread :[%s]", strerror(err));
    }
    pthread_join(tid, NULL);
    close(newsockfd);
    close(sockfd);

    return 0;
}

